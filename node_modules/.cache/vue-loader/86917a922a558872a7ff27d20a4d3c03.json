{"remainingRequest":"C:\\xampp\\htdocs\\IHM\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\xampp\\htdocs\\IHM\\src\\components\\MarkerCluster.vue?vue&type=template&id=fb10d740","dependencies":[{"path":"C:\\xampp\\htdocs\\IHM\\src\\components\\MarkerCluster.vue","mtime":1641304317307},{"path":"C:\\xampp\\htdocs\\IHM\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639666687566},{"path":"C:\\xampp\\htdocs\\IHM\\node_modules\\babel-loader\\lib\\index.js","mtime":1639666688625},{"path":"C:\\xampp\\htdocs\\IHM\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1639666689323},{"path":"C:\\xampp\\htdocs\\IHM\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639666687566},{"path":"C:\\xampp\\htdocs\\IHM\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1639666688819}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPg0KICAgIDxzbG90IHYtaWY9InJlYWR5Ij48L3Nsb3Q+DQogIDwvZGl2Pg0K"},{"version":3,"sources":["C:\\xampp\\htdocs\\IHM\\src\\components\\MarkerCluster.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3B,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/xampp/htdocs/IHM/src/components/MarkerCluster.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div style=\"display: none\">\r\n    <slot v-if=\"ready\"></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport \"leaflet.markercluster/dist/MarkerCluster.css\";\r\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\";\r\nimport {\r\n  inject,\r\n  nextTick,\r\n  onBeforeUnmount,\r\n  onMounted,\r\n  provide,\r\n  ref,\r\n} from \"vue\";\r\nimport { propsBinder, remapEvents } from \"@vue-leaflet/vue-leaflet/src/utils\";\r\nimport {\r\n  render,\r\n  setup as layerSetup,\r\n} from \"@vue-leaflet/vue-leaflet/src/functions/layer\";\r\n\r\nconst props = {\r\n  options: {\r\n    type: Object,\r\n    default() {\r\n      return {};\r\n    },\r\n  },\r\n};\r\n\r\nexport default {\r\n  name: \"MarkerCluster\",\r\n\r\n  props,\r\n\r\n  // emits: ['ready'],\r\n\r\n  setup(props, context) {\r\n    const leafletRef = ref({});\r\n    const ready = ref(false);\r\n\r\n    const addLayerToMainMap = inject(\"addLayer\");\r\n    const removeLayerFromMainMap = inject(\"removeLayer\");\r\n\r\n    provide(\"canSetParentHtml\", () => !!leafletRef.value.getElement());\r\n    provide(\r\n        \"setParentHtml\",\r\n        (html) => (leafletRef.value.getElement().innerHTML = html)\r\n    );\r\n    // provide('setIcon', (newIcon) => leafletRef.value.setIcon && leafletRef.value.setIcon(newIcon))\r\n    provide(\"addLayer\", (layer) => {\r\n      // replace the provided addLayer function for child components of MarkerCluster so they add to the cluster rather than the map\r\n      leafletRef.value.addLayer(layer.leafletObject);\r\n    });\r\n    provide(\"removeLayer\", (layer) => {\r\n      leafletRef.value.removeLayer(layer.leafletObject);\r\n    });\r\n\r\n    // const {options, methods} = markerSetup(props, leafletRef, context)\r\n\r\n    const { methods } = layerSetup(props, leafletRef, context);\r\n\r\n    onMounted(async () => {\r\n      const { DomEvent, marker } = await import(\"leaflet/dist/leaflet-src.esm\");\r\n\r\n      const { MarkerClusterGroup } = await import(\r\n          \"leaflet.markercluster/dist/leaflet.markercluster-src.js\"\r\n          );\r\n      leafletRef.value = new MarkerClusterGroup(props.options);\r\n\r\n      const listeners = remapEvents(context.attrs);\r\n      DomEvent.on(leafletRef.value, listeners);\r\n\r\n      propsBinder(methods, leafletRef.value, props);\r\n\r\n      addLayerToMainMap({\r\n        ...props,\r\n        ...methods,\r\n        leafletObject: leafletRef.value,\r\n      });\r\n\r\n      ready.value = true;\r\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\r\n    });\r\n\r\n    onBeforeUnmount(\r\n        () =>\r\n            leafletRef.value &&\r\n            leafletRef.value._leaflet_id &&\r\n            removeLayerFromMainMap({ leafletObject: leafletRef.value })\r\n    );\r\n\r\n    return { ready, leafletObject: leafletRef };\r\n  },\r\n  render() {\r\n    return render(this.ready, this.$slots);\r\n  },\r\n};\r\n</script>\r\n"]}]}